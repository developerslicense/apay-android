plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'

    id 'maven-publish'
    id 'signing'
    id "kotlin-parcelize"
}

def properties = new Properties()
try {
//    properties.load(new FileInputStream(rootProject.file("gradle.properties")))
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
} catch (Exception e) {
    logger.warn("Properties not Found!")
}

android {
    namespace 'kz.airbapay.apay_android'
    compileSdk airbaPayCompileSdk

    defaultConfig {
        minSdk 21

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField("String", "LOGGLY_TOKEN", "\"" + properties['logglyToken'] + "\"")

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        compose true
        mlModelBinding true
        android.buildFeatures.buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.9' // '1.4.3'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = jdkCompileVersion
    }
}

ext {
    appCompat = '1.6.1'
    androidxJUnit = '1.1.4'
    androidxTest = '1.5.0'
    androidxTestRunner = '1.5.2'
    androidxCore = '1.12.0'
    activityKtx = '1.8.2'

    biometricLibraryVersion = '1.1.0'

    camerax = '1.3.1'
    constraint = '2.1.4'
    constraintCompose = '1.0.1'
    desugarJdkLibs = '1.1.1'
    coroutines = '1.5.2'
    coroutinesCore = '1.6.1'
    coroutinesPlayServices = "1.7.1"
    coilVersion = "2.2.2"
    coilComposeVersion = "1.4.5"

    espressoCore = '3.5.0'

    gmsPayService= "19.3.0-beta01"

    junit = '4.13.2'
    jetpackComposeAccompanist = '0.28.0'
    jetpackComposeFoundation = '1.4.3'
    joorReflectionForIoCard = '0.9.15'

    ioCard = '5.5.1'

    lifecycle = '2.7.0'
    lifecycleTesting = '2.2.0'

    material = '1.11.0'

    navigationComponent = '2.7.6'

    openCv = '4.1.0'
    okhttp = '4.2.2'
    okhttpInterceptor = '4.9.2'

    retrofitVersion = '2.9.0'

    tensorflow = '2.14.0'
}
dependencies {

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    androidTestImplementation platform("androidx.compose:compose-bom:$constraintCompose")

    // AndroidxCore
    implementation "androidx.core:core-ktx:$androidxCore"
    // Activity ktx
    implementation "androidx.activity:activity-ktx:$activityKtx"
    // AppCompat
    implementation "androidx.appcompat:appcompat:$appCompat"

    // Biometric
    implementation "androidx.biometric:biometric:$biometricLibraryVersion"

    // CameraX core library using the camera2 api
    implementation "androidx.camera:camera-core:$camerax"
    implementation "androidx.camera:camera-camera2:$camerax"
    implementation "androidx.camera:camera-lifecycle:$camerax"
    implementation "androidx.camera:camera-view:$camerax"
    implementation "androidx.camera:camera-extensions:$camerax"

    // Constraint
    implementation "androidx.constraintlayout:constraintlayout:$constraint"
    implementation "androidx.constraintlayout:constraintlayout-compose:$constraintCompose"
    
    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesCore"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesCore"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutinesPlayServices")

    // Coil
    implementation "io.coil-kt:coil:$coilVersion"
    implementation "io.coil-kt:coil-gif:$coilVersion"
    implementation "io.coil-kt:coil-svg:$coilVersion"
    implementation "com.github.skydoves:landscapist-coil:$coilComposeVersion"// обертка для coil для композа https://github.com/skydoves/landscapist#coil

    // Gms
    implementation("com.google.android.gms:play-services-wallet:$gmsPayService")

    // Jetpack compose
    def composeBom = platform("androidx.compose:compose-bom:$airbaPayJetpackCompose") // https://developer.android.com/jetpack/compose/setup#bom-version-mapping
    implementation composeBom
    androidTestImplementation composeBom

    implementation "androidx.activity:activity-compose"
    implementation 'androidx.compose.animation:animation'
    implementation "androidx.compose.material:material"

    implementation 'androidx.compose.ui:ui-tooling-data'
    implementation 'androidx.compose.ui:ui-tooling-preview' //https://developer.android.com/jetpack/compose/tooling
    debugImplementation 'androidx.compose.ui:ui-tooling'

    implementation 'androidx.compose.runtime:runtime-livedata'

    implementation "com.google.accompanist:accompanist-flowlayout:$jetpackComposeAccompanist"
    implementation "com.google.accompanist:accompanist-pager:$jetpackComposeAccompanist"
    implementation "com.google.accompanist:accompanist-swiperefresh:$jetpackComposeAccompanist"
    implementation "com.google.accompanist:accompanist-permissions:$jetpackComposeAccompanist"

    // io card
//    implementation "org.jooq:joor:$joorReflectionForIoCard"
    implementation "io.card:android-sdk:$ioCard"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle"
    testImplementation "androidx.arch.core:core-testing:$lifecycleTesting"

    // Material
    implementation "com.google.android.material:material:$material"

    // Navigation
    implementation "androidx.navigation:navigation-compose:$navigationComponent"
    implementation "androidx.compose.foundation:foundation:$jetpackComposeFoundation"

    // OpenCv
//    implementation "com.websitebeaver:opencv:$openCv"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpInterceptor"

    // Tests
    implementation "androidx.test:core-ktx:$androidxTest"
    implementation "androidx.test:runner:$androidxTestRunner"
    testImplementation "junit:junit:$junit"
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    androidTestImplementation "androidx.test.ext:junit:$androidxJUnit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCore"

    // Tensorflow
    implementation "org.tensorflow:tensorflow-lite:$tensorflow"

}


group 'kz.airbapay' // this is your groupId
version '1.1.4' //_2023_08_00'  // todo меняй и DataHolder.sdkVersion

ext { // this are variables
    pomGroupId = group
    pomVersion = version
    pomArtifactId = "apay_android"
    pomArtifactName = "apay_android"

    jdkCompileVersion = 17
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release = 17
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {//это чтоб убрать необходимость писать аннотации варнингов для Jetpack Compose
        freeCompilerArgs += [
                "-opt-in=kotlin.ExperimentalUnsignedTypes",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=kotlinx.coroutines.InternalCoroutinesApi",
                "-opt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                "-opt-in=androidx.compose.animation.ExperimentalAnimationApi",
                "-opt-in=androidx.compose.ExperimentalComposeApi",
                "-opt-in=androidx.compose.material.ExperimentalMaterialApi",
                "-opt-in=androidx.compose.runtime.ExperimentalComposeApi",
                "-opt-in=androidx.compose.ui.ExperimentalComposeUiApi",
                "-opt-in=coil.annotation.ExperimentalCoilApi",
                "-opt-in=kotlinx.serialization.ExperimentalSerializationApi",
                "-opt-in=com.google.accompanist.pager.ExperimentalPagerApi",
                "-opt-in=com.google.accompanist.permissions.ExperimentalPermissionsApi"
        ]
    }
}

afterEvaluate {
    publishing {

        publications {
            mavenJava(MavenPublication) {
                groupId = "${pomGroupId}"
                artifactId = "${pomArtifactId}"
                version = "${pomVersion}"
                from components.release

                pom {
                    name = "${pomArtifactName}"
                    description = "AirbaPay sdk android"
                    url = "https://airbapay.kz"
                    inceptionYear = '2023'

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0' // the name of your license
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            // url to your license
                        }
                    }
                    developers { // put the developers here
                        developer {
                            id = 'developerslicense'
                            name = 'AirbaPay'
                            email = 'developers.license@technodom.kz'
                        }
                    }
                    scm { // GIT data of your project
                        url = "scm:git:https://github.com/developerslicense/apay.git"
                        developerConnection = 'scm:git:ssh://github.com/developerslicense/apay.git'
                    }

                }
            }
        }

        repositories {
            maven {
                name = "OSSRH"
//                url = "https://s01.oss.sonatype.org/content/repositories/snapshots/" // this is the repo for snapshots
                url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                // this is deploys to the stating repo in nexus
                credentials {
                    username = "developers.license@technodom.kz"
                    password = properties.osshrPass
                }
            }
        }
    }
    signing {
        // By default the Signing Plugin uses a Java-based implementation of PGP for signing. This implementation cannot use the gpg-agent program for managing private keys, though. If you want to use the gpg-agent, you can change the signatory implementation used by the Signing Plugin:
        useGpgCmd() // YOU NEED THIS. Without this method, gradle will not work with GnuPG keys.
        sign publishing.publications.mavenJava
    }
}
